#!/bin/bash
. /var/openpanel/api/sh/module.sh

MySQLBackup.create() {
  enabled=$(coreval MySQLBackup enabled)
  name=`coreval MySQLBackup name | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  frequency=`coreval MySQLBackup frequency | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  id=`coreval MySQL:Database id | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  email=`coreval MySQLBackup email | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  error=""
  userid=`coreval MySQLBackup uuid`
  
  cd /var/openpanel/conf/staging/MySQLBackup/
  if [ $enabled = true ]; then
    #-----------------------
    # Create owner directory (this will hold all database backups)
    if [ ! -d "/var/openpanel/conf/staging/MySQLBackup/${userid:0:8}" ]; then
      mkdir ${userid:0:8}
    fi
    #----------------------
    # Create temporary file
    if [ ! -d "/var/openpanel/conf/staging/MySQLBackup/tmp" ]; then
      mkdir tmp
    fi
    cd tmp
    rm /var/openpanel/conf/staging/MySQLBackup/tmp/*

    # Calculate cron job path and filename (${id,,} requires bash4)
    jobName="${id,,}-timed-job"
    if [ $frequency = "Hourly" ]; then
      jobPath="/etc/cron.hourly"
    elif [ $frequency = "Daily" ]; then
      jobPath="/etc/cron.daily"
    elif [ $frequency = "Weekly" ]; then
      jobPath="/etc/cron.weekly"
    elif [ $frequency = "Monthly" ]; then
      jobPath="/etc/cron.monthly"
    else
      error="Invalid frequency specified"
    fi

    #--------------------
    # Create the cron job
    if [ -n "$jobPath" ]; then

      # Create the cron job script
      echo "#!/bin/bash" &> "$jobName"
      echo "#---------------------------------------" &>> "$jobName"
      echo "# AUTOMATED BACKUP JOB FOR DATABASE: $id" &>> "$jobName"
      echo "# (this file is automatically generated)" &>> "$jobName"
      echo "#---------------------------------------" &>> "$jobName"
      echo "name=\"$name\"" &>> "$jobName"
      echo "id=\"$id\"" &>> "$jobName"
      echo "email=\"$email\"" &>> "$jobName"
      echo 'dbuser="openpanel"' &>> "$jobName"
      echo 'dbpass=$(cat /etc/openpanel/mysql.pwd)' &>> "$jobName"
      echo 'cd /var/openpanel/conf/staging/MySQLBackup/'"${userid:0:8}" &>> "$jobName"
      echo 'backupName="$id~$(date +%Y%m%d-%H%M%S)~$name.sql"' &>> "$jobName"
      echo 'mysqldump -u $dbuser -p$dbpass --add-drop-table $id > $backupName' &>> "$jobName"
      echo 'if [ -f "$backupName" ]; then' &>> "$jobName"
      echo '  (echo -e "Attached is the scheduled Database Snapshot for the database: $id\n\n$(date)";uuencode $backupName $backupName) | mail -s "OpenPanel Database Snapshot ($name)" $email' &>> "$jobName"
      echo 'else' &>> "$jobName"
      echo '  (echo -e "An error has occured attempting to perform a Database Snapshot for the database: $id\n\nPlease check the Database Snapshot settings in OpenPanel.\n\n$(date)";uuencode $backupName $backupName) | mail -s "Important! OpenPanel Database Snapshot Failed ($name)" $email' &>> "$jobName"
      echo 'fi' &>> "$jobName"
#      echo 'rm $backupName' &>> "$jobName"
      chmod -w 755 "$jobName"

      # Move script to cron directory
      authd installfile "tmp/$jobName" "$jobPath"
    fi

    # Clean up (simply remove tmp folder)
    cd /var/openpanel/conf/staging/MySQLBackup
    rm -R /var/openpanel/conf/staging/MySQLBackup/tmp

    if [ $error != "" ]; then
      exiterror $error
    fi
  fi
}

MySQLBackup.delete() {
  id=`coreval MySQL:Database id | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  jobName="${id,,}-timed-job"

  # Remove any cron instances for this database
  if [ -f "/etc/cron.hourly/$jobName" ]; then
    authd deletefile "/etc/cron.hourly/$jobName"
  fi
  if [ -f "/etc/cron.daily/$jobName" ]; then
    authd deletefile "/etc/cron.daily/$jobName"
  fi
  if [ -f "/etc/cron.weekly/$jobName" ]; then
    authd deletefile "/etc/cron.weekly/$jobName"
  fi
  if [ -f "/etc/cron.monthly/$jobName" ]; then
    authd deletefile "/etc/cron.monthly/$jobName"
  fi
}

MySQLBackup.update() {
  # Simply call delete/create, to recreate the cron job
  MySQLBackup.delete
  MySQLBackup.create
set > /tmp/vars.log
}

MySQLBackup.create-snapshot() {
  id=""
  echo "MySQLBackup.create-snapshot" &>> /var/openpanel/conf/staging/MySQLBackup/create.log
}

MySQLSnapshots.update() {
  objectid=`coreval OpenCORE:Session objectid`
  restore=$(coreval MySQLSnapshots restore)
  delete=$(coreval MySQLSnapshots delete)
  if [ $restore = true ] || [ $delete = true ]; then
    backupdir=/var/openpanel/conf/staging/MySQLBackup/${objectid:0:8}
    if [ -d $backupdir ]; then
      cd $backupdir
      for f in *.sql
      do
        filehash=$(echo -n $f | md5sum)
        fileuuid="${objectid:0:8}-${filehash:8:4}-${filehash:12:4}-${filehash:16:4}-${filehash:20:12}"
        OLDIFS=$IFS
        IFS='~'
        arr=($f)
        dbname=${arr[0]}
        IFS=$OLDIFS
        if [ $fileuuid = $objectid ]; then
          if [ -f "$backupdir/$f" ]; then
            if [ $restore = true ]; then
              authd runscript mysql-operation "$objectid" "$backupdir/$f" --verbose $dbname
              exitok
            elif [ $delete = true ]; then
              authd deletefile "$backupdir/$f"
              exitok
            fi
          fi
        fi
      done
      exiterror "Failed to locate backup file."
    else
      exiterror "Backup directory not found: $backupdir"
    fi
  fi
}
MySQLSnapshots.admin() {
  id=""
  echo "MySQLSnapshots.admin" &>> /var/openpanel/conf/staging/MySQLBackup/archive.log
}
MySQLSnapshots.listobjects() {
  userid=`coreval OpenCORE:Session parentid`

  echo "MySQLSnapshots.listobjects ($(date))" &>> /var/openpanel/conf/staging/MySQLBackup/archive.log
  set > /tmp/vars2.log

  backupdir=/var/openpanel/conf/staging/MySQLBackup/${userid:0:8}
  if [ -d $backupdir ]; then
    cd $backupdir
    echo "<openpanel.module>"
    echo "    <dict id=\"objects\">"
    echo "        <dict id=\"MySQLSnapshots\" type=\"class\">"
    $index=0
    for f in *.sql
    do
      if [ -f $f ]; then
        index=$(($index+1))
        filehash=$(echo -n $f | md5sum)
        fileuuid="${userid:0:8}-${filehash:8:4}-${filehash:12:4}-${filehash:16:4}-${filehash:20:12}"
        OLDIFS=$IFS
        IFS='~'
        arr=($f)
        dbname=${arr[0]}
        shdate=${arr[1]//-*/}
        shtime=${arr[1]//*-/}
        shtimestamp=$(date -d "$shdate ${shtime:0:2}:${shtime:2:2}:${shtime:4:2}" +"%l:%M %p UTC")
        shdatestamp=$(date -d "$shdate ${shtime:0:2}:${shtime:2:2}:${shtime:4:2}" +"%A, %B %e, %Y")
        shname=${arr[2]//.sql/}
        IFS=$OLDIFS
        echo "                <dict id=\"$fileuuid\" type=\"object\">"
        echo "                        <string id=\"index\">$index</string>"
        echo "                        <string id=\"id\">$shname</string>"
        echo "                        <string id=\"time\">$shtimestamp</string>"
        echo "                        <string id=\"date\">$shdatestamp</string>"
        echo "                        <string id=\"restore\">false</string>"
        echo "                        <string id=\"class\">MySQLSnapshots</string>"
        echo "                        <string id=\"metaid\">mysqlsnapshots</string>"
        echo "                        <string id=\"uuid\">$fileuuid</string>"
        echo "                        <string id=\"parentid\">$userid</string>"
        echo "                </dict>"
      fi
    done
    echo "        </dict>"
    echo "    </dict>"
    echo "    <dict id=\"OpenCORE:Result\">"
    echo "        <integer id=\"error\">0</integer>"
    echo "        <string id=\"message\">OK</string>"
    echo "    </dict>"
    echo "</openpanel.module>"
    echo "quit" >&3
    exit 0
  fi
}

implement MySQLBackup.module
implement MySQLSnapshots.module
