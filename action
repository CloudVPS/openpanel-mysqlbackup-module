#!/bin/bash
. /var/openpanel/api/sh/module.sh

MySQLBackup.create() {
  enabled=$(coreval MySQLBackup enabled)
  name=`coreval MySQLBackup name | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  frequency=`coreval MySQLBackup frequency | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  id=`coreval MySQL:Database id | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  email=`coreval MySQLBackup email | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  error=""
  
  if [ $enabled = true ]; then
    #----------------------
    # Create temporary file
    cd /var/openpanel/conf/staging/MySQLBackup/
    if [ ! -d "/var/openpanel/conf/staging/MySQLBackup/tmp" ]; then
      mkdir tmp
    fi
    cd tmp
    rm /var/openpanel/conf/staging/MySQLBackup/tmp/*

    # Calculate cron job path and filename (${id,,} requires bash4)
    jobName="${id,,}-timed-job"
    if [ $frequency = "Hourly" ]; then
      jobPath="/etc/cron.hourly"
    elif [ $frequency = "Daily" ]; then
      jobPath="/etc/cron.daily"
    elif [ $frequency = "Weekly" ]; then
      jobPath="/etc/cron.weekly"
    elif [ $frequency = "Monthly" ]; then
      jobPath="/etc/cron.monthly"
    else
      error="Invalid frequency specified"
    fi

    #-------------------------------------------------------
    # Perform an initial backup/email, and create a cron job
    if [ -n "$jobPath" ]; then

      # Create the cron job script
      echo "#!/bin/bash" &> "$jobName"
      echo "#---------------------------------------" &>> "$jobName"
      echo "# AUTOMATED BACKUP JOB FOR DATABASE: $id" &>> "$jobName"
      echo "# (this file is automatically generated)" &>> "$jobName"
      echo "#---------------------------------------" &>> "$jobName"
      echo "name=\"$name\"" &>> "$jobName"
      echo "id=\"$id\"" &>> "$jobName"
      echo "email=\"$email\"" &>> "$jobName"
      echo 'dbuser="openpanel"' &>> "$jobName"
      echo 'dbpass=$(cat /etc/openpanel/mysql.pwd)' &>> "$jobName"
      echo 'cd /var/openpanel/conf/staging/MySQLBackup/' &>> "$jobName"
      echo 'backupName="${id,,}-$(date +%Y%m%d-%H%M%S)-${name,,}.sql"' &>> "$jobName"
      echo 'mysqldump -u $dbuser -p$dbpass $id > $backupName' &>> "$jobName"
      echo 'if [ -f "$backupName" ]; then' &>> "$jobName"
      echo '  (echo -e "Attached is the scheduled Database Snapshot for the database: $id\n\n$(date)";uuencode $backupName $backupName) | mail -s "OpenPanel Database Snapshot ($name)" $email' &>> "$jobName"
      echo 'else' &>> "$jobName"
      echo '  (echo -e "An error has occured attempting to perform a Database Snapshot for the database: $id\n\nPlease check the Database Snapshot settings in OpenPanel.\n\n$(date)";uuencode $backupName $backupName) | mail -s "Important! OpenPanel Database Snapshot Failed ($name)" $email' &>> "$jobName"
      echo 'fi' &>> "$jobName"
      chmod -w 755 "$jobName"

      # Move temporary file to cron directory
      authd installfile "tmp/$jobName" "$jobPath"
    fi

    # Clean up (simply remove tmp folder)
    cd /var/openpanel/conf/staging/MySQLBackup
    rm -R /openpanel/conf/staging/MySQLBackup/tmp

    if [ $error != "" ]; then
      exiterror $error
    fi
  fi
}

MySQLBackup.delete() {
  id=`coreval MySQL:Database id | grep "^[ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/=+-@.]*$"`
  jobName="${id,,}-timed-job"

  # Remove any cron instances for this database
  if [ -f "/etc/cron.hourly/$jobName" ]; then
    authd deletefile "/etc/cron.hourly/$jobName"
  fi
  if [ -f "/etc/cron.daily/$jobName" ]; then
    authd deletefile "/etc/cron.hourly/$jobName"
  fi
  if [ -f "/etc/cron.weekly/$jobName" ]; then
    authd deletefile "/etc/cron.hourly/$jobName"
  fi
  if [ -f "/etc/cron.monthly/$jobName" ]; then
    authd deletefile "/etc/cron.hourly/$jobName"
  fi
}

MySQLBackup.update() {
  # Simply call delete/create, to recreate the cron job
  MySQLBackup.delete
  MySQLBackup.create
}

implement MySQLBackup.module
