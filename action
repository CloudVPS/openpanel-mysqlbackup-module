#!/bin/bash
. /var/openpanel/api/sh/module.sh


MySQLBackup.parseXML() {
  if [ $# != 1 ]; then
    exiterror "MySQLBackup.parseXML called with incorrect number of parameters: '$*'"
  else
    xmlFile=$1
    elemList=( $(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep -e "</.*>$" | while read line; do \
      echo $line | sed -e 's/^.*<\///' | cut -d '>' -f 1; \
    done) )

    totalNoOfTags=${#elemList[@]}; ((totalNoOfTags--))
    suffix=$(echo ${elemList[$totalNoOfTags]} | tr -d '</>')
    suffix="${suffix}_"

    for (( i = 0 ; i < ${#elemList[@]} ; i++ )); do
      elem=${elemList[$i]}
      elemLine=$(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep "</$elem>")
      echo $elemLine | grep -e "^</[^ ]*>$" 1>/dev/null 2>&1
      if [ "0" = "$?" ]; then
        continue
      fi
      elemVal=$(echo $elemLine | tr '\011' '\040'| sed -e 's/^[ ]*//' -e 's/^<.*>\([^<].*\)<.*>$/\1/' | sed -e 's/^[ ]*//' | sed -e 's/[ ]*$//')
      xmlElem="${suffix}$(echo $elem | sed 's/-/_/g')"
      eval ${xmlElem}=`echo -ne \""${elemVal}"\"`
      attrList=($(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep "</$elem>" | tr '\011' '\040' | sed -e 's/^[ ]*//' | cut -d '>' -f 1  | sed -e 's/^<[^ ]*//' | tr "'" '"' | tr '"' '\n'  | tr '=' '\n' | sed -e 's/^[ ]*//' | sed '/^$/d' | tr '\011' '\040' | tr ' ' '>'))
      for (( j = 0 ; j < ${#attrList[@]} ; j++ )); do
        attr=${attrList[$j]}
        ((j++))
        attrVal=$(echo ${attrList[$j]} | tr '>' ' ')
        attrName=`echo -ne ${xmlElem}_${attr}`
        eval ${attrName}=`echo -ne \""${attrVal}"\"`
      done
    done
  fi
}

MySQLBackup.create() {
  enabled=$(coreval MySQLBackup enabled)
  name=$(coreval MySQLBackup name)
  frequency=$(coreval MySQLBackup frequency)
  id=$(coreval MySQL:Database id)
  email=$(coreval MySQLBackup email)
  error=""

  if [ $enabled = true ]; then
    #----------------------
    # Create temporary file
    cd /var/openpanel/conf/staging/MySQLBackup/
    mkdir tmp
    cd tmp
    rm -R *
    echo -n "" &> $jobName

    # Calculate cron job path and filename
    jobName="${id,,}-timed-job"
    if [ $frequency = "Hourly" ]; then
      jobPath="/etc/cron.hourly"
    elif [ $frequency = "Daily" ]; then
      jobPath="/etc/cron.daily"
    elif [ $frequency = "Weekly" ]; then
      jobPath="/etc/cron.weekly"
    elif [ $frequency = "Monthly" ]; then
      jobPath="/etc/cron.monthly"
    else
      error="Invalid frequency specified"
    fi

    #-------------------------------------------------------
    # Perform an initial backup/email, and create a cron job
    if [ -x $jobPath ]; then

      # Create the cron job script
      echo "#!/bin/bash" &> "$jobName"
      echo "#---------------------------------------" &>> "$jobName"
      echo "# AUTOMATED BACKUP JOB FOR DATABASE: $id" &>> "$jobName"
      echo "# (this file is automatically generated)" &>> "$jobName"
      echo "#---------------------------------------" &>> "$jobName"
      echo "name=\"$name\"" &>> "$jobName"
      echo "id=\"$id\"" &>> "$jobName"
      echo "email=\"$email\"" &>> "$jobName"
      echo 'dbuser="openpanel"' &>> "$jobName"
      echo 'dbpass=$(cat /etc/openpanel/mysql.pwd)' &>> "$jobName"
      echo 'cd /var/openpanel/conf/staging/MySQLBackup/' &>> "$jobName"
      echo 'backupName="${id,,}-$(date +%Y%m%d-%H%M%S)-${name,,}.sql"' &>> "$jobName"
      echo 'mysqldump -u $dbuser -p$dbpass $id > $backupName' &>> "$jobName"
      echo 'if [ -f "$backupName" ]; then' &>> "$jobName"
      echo '  (echo -e "Attached is the scheduled Database Snapshot for the database: $id\n\n$(date)";uuencode $backupName $backupName) | mail -s "OpenPanel Database Snapshot ($name)" $email' &>> "$jobName"
      echo 'else' &>> "$jobName"
      echo '  (echo -e "An error has occured attempting to perform a Database Snapshot for the database: $id\n\nPlease check the Database Snapshot settings in OpenPanel.\n\n$(date)";uuencode $backupName $backupName) | mail -s "Important! OpenPanel Database Snapshot Failed ($name)" $email' &>> "$jobName"
      echo 'fi' &>> "$jobName"
      chmod 755 "$jobName"

      # Move temporary file to cron directory
      authd runscript install-folder-contents "0123456789" "/var/openpanel/conf/staging/MySQLBackup/tmp/" "$jobPath" "0" "0" "0" "-f"
      authd runscript change-permission "0123456789" "$jobPath/$jobName" "$(whoami)" "$(whoami)" "755"
    fi

    # Clean up (simply remove tmp folder)
    cd /var/openpanel/conf/staging/MySQLBackup
    rm -R tmp

    if [ $error != "" ]; then
      exiterror $error
    fi
  fi
}

MySQLBackup.delete() {
  id=$(coreval MySQL:Database id)
  jobName="${id,,}-timed-job"

  # Remove any cron instances for this database
  if [ -f "/etc/cron.hourly/$jobName" ]; then
    authd runscript remove-single-file "0123456789" "/etc/cron.hourly/$jobName"
  fi
  if [ -f "/etc/cron.daily/$jobName" ]; then
    authd runscript remove-single-file "0123456789" "/etc/cron.daily/$jobName"
  fi
  if [ -f "/etc/cron.weekly/$jobName" ]; then
    authd runscript remove-single-file "0123456789" "/etc/cron.weekly/$jobName"
  fi
  if [ -f "/etc/cron.monthly/$jobName" ]; then
    authd runscript remove-single-file "0123456789" "/etc/cron.monthly/$jobName"
  fi
}

MySQLBackup.update() {
  # Simply call delete/create, to recreate the cron job
  MySQLBackup.delete
  MySQLBackup.create
}

implement MySQLBackup.module
