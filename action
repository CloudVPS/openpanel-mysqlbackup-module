#!/bin/bash
. /var/openpanel/api/sh/module.sh


MySQLBackup.parseXML() {
  if [ $# != 1 ]; then
    exiterror "MySQLBackup.parseXML called with incorrect number of parameters: '$*'"
  else
    xmlFile=$1
    elemList=( $(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep -e "</.*>$" | while read line; do \
      echo $line | sed -e 's/^.*<\///' | cut -d '>' -f 1; \
    done) )

    totalNoOfTags=${#elemList[@]}; ((totalNoOfTags--))
    suffix=$(echo ${elemList[$totalNoOfTags]} | tr -d '</>')
    suffix="${suffix}_"

    for (( i = 0 ; i < ${#elemList[@]} ; i++ )); do
      elem=${elemList[$i]}
      elemLine=$(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep "</$elem>")
      echo $elemLine | grep -e "^</[^ ]*>$" 1>/dev/null 2>&1
      if [ "0" = "$?" ]; then
        continue
      fi
      elemVal=$(echo $elemLine | tr '\011' '\040'| sed -e 's/^[ ]*//' -e 's/^<.*>\([^<].*\)<.*>$/\1/' | sed -e 's/^[ ]*//' | sed -e 's/[ ]*$//')
      xmlElem="${suffix}$(echo $elem | sed 's/-/_/g')"
      eval ${xmlElem}=`echo -ne \""${elemVal}"\"`
      attrList=($(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep "</$elem>" | tr '\011' '\040' | sed -e 's/^[ ]*//' | cut -d '>' -f 1  | sed -e 's/^<[^ ]*//' | tr "'" '"' | tr '"' '\n'  | tr '=' '\n' | sed -e 's/^[ ]*//' | sed '/^$/d' | tr '\011' '\040' | tr ' ' '>'))
      for (( j = 0 ; j < ${#attrList[@]} ; j++ )); do
        attr=${attrList[$j]}
        ((j++))
        attrVal=$(echo ${attrList[$j]} | tr '>' ' ')
        attrName=`echo -ne ${xmlElem}_${attr}`
        eval ${attrName}=`echo -ne \""${attrVal}"\"`
      done
    done
  fi
}

MySQLBackup.create() {
  enabled=$(coreval MySQLBackup enabled)
  name=$(coreval MySQLBackup name)
  frequency=$(coreval MySQLBackup frequency)
  id=$(coreval MySQL:Database id)
  email=$(coreval MySQLBackup email)

  if [ $enabled = true ]; then
    #--------------------------------
    # Copy coreclient to staging area (!!!!MUST BE REMOVED it will be installed for OP1.1!!!!)
    cd /var/openpanel/conf/staging/FolderPassword
    cp /var/openpanel/modules/FolderPassword.module/coreclient ./
    PATH=$PATH:/var/openpanel/conf/staging/FolderPassword

    #-------------------------------------
    # Read the MySQL global admin password (!!!!REQUIRES CHMOD 644!!!!)
    dbuser="openpanel"
    dbpass=$(cat /etc/openpanel/mysql.pwd)
    backupName="${id,,}-$(date +%Y%m%d-%H%M%S)-${name,,}.sql"
    jobName="${id,,}-timed-job"

    #-------------------------------------------------------
    # Perform an initial backup/email, and create a cron job
    cd /var/openpanel/conf/staging/MySQLBackup/
    mkdir tmp
    cd tmp
    mysqldump -u $dbuser -p$dbpass $id > $backupName
    if [ -f "$backupName" ]; then
      # Perform the initial backup, then remove the backup file
      (echo -e "Attached is the initial Database Snapshot for the database: $id\n\n$(date)";uuencode $backupName $backupName) | mail -s "OpenPanel Database Snapshot ($name)" $email
      rm $backupName

      # Create the cron job script
      echo "## AUTOMATED BACKUP JOB FOR DATABASE: $id" &> $jobName
      echo "name=\"$name\"" &>> $jobName
      echo "id=\"$id\"" &>> $jobName
      echo "email=\"$email\"" &>> $jobName
      echo 'dbuser="openpanel"' &>> $jobName
      echo 'dbpass=$(cat /etc/openpanel/mysql.pwd)' &>> $jobName
      echo 'cd /var/openpanel/conf/staging/MySQLBackup/' &>> $jobName
      echo 'backupName="${id,,}-$(date +%Y%m%d-%H%M%S)-${name,,}.sql"' &>> $jobName
      echo 'mysqldump -u $dbuser -p$dbpass $id > $backupName' &>> $jobName
      echo 'if [ -f "$backupName" ]; then' &>> $jobName
      echo '  (echo -e "Attached is the scheduled Database Snapshot for the database: $id\n\n$(date)";uuencode $backupName $backupName) | mail -s "OpenPanel Database Snapshot ($name)" $email' &>> $jobName
      echo 'else' &>> $jobName
      echo '  (echo -e "An error has occured attempting to perform a Database Snapshot for the database: $id\n\nPlease check the Database Snapshot settings in OpenPanel.\n\n$(date)";uuencode $backupName $backupName) | mail -s "Important! OpenPanel Database Snapshot Failed ($name)" $email' &>> $jobName
      echo 'fi' &>> $jobName
      chmod 755 $jobName
      if [ $frequency = "Hourly" ]; then
        authd runscript install-folder-contents "no-session-required" "/var/openpanel/conf/staging/MySQLBackup/tmp" "/etc/cron.hourly" "root" "root" "775"
      elif [ $frequency = "Daily" ]; then
        authd runscript install-folder-contents "no-session-required" "/var/openpanel/conf/staging/MySQLBackup/tmp" "/etc/cron.daily" "root" "root" "775"
      elif [ $frequency = "Weekly" ]; then
        authd runscript install-folder-contents "no-session-required" "/var/openpanel/conf/staging/MySQLBackup/tmp" "/etc/cron.weekly" "root" "root" "775"
      elif [ $frequency = "Monthly" ]; then
        authd runscript install-folder-contents "no-session-required" "/var/openpanel/conf/staging/MySQLBackup/tmp" "/etc/cron.monthly" "root" "root" "775"
      else
        exiterror "Invalid frequency specified"
      fi
    else
      exiterror "An error has occured attempting to perform an initial Database Snapshot."
    fi
  fi
}

MySQLBackup.delete() {
  id=$(coreval MySQL:Database id)
  jobName="${id,,}-timed-job"

  # Remove any cron instances for this database
  # (Just calling remove for all folders, since we don't always know what the previous value was)
  rm /etc/cron.hourly/$jobname
  rm /etc/cron.daily/$jobname
  rm /etc/cron.weekly/$jobname
  rm /etc/cron.monthly/$jobname
}

MySQLBackup.update() {
  # Simply call delete/create, to recreate the cron job
  MySQLBackup.delete
  MySQLBackup.create
}

implement MySQLBackup.module
