#!/bin/bash
. /var/openpanel/api/sh/module.sh


FolderPassword.parseXML() {
  if [ $# != 1 ]; then
    exiterror "FolderPassword.parseXML called with incorrect number of parameters: '$*'"
  else
    xmlFile=$1
    elemList=( $(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep -e "</.*>$" | while read line; do \
      echo $line | sed -e 's/^.*<\///' | cut -d '>' -f 1; \
    done) )

    totalNoOfTags=${#elemList[@]}; ((totalNoOfTags--))
    suffix=$(echo ${elemList[$totalNoOfTags]} | tr -d '</>')
    suffix="${suffix}_"

    for (( i = 0 ; i < ${#elemList[@]} ; i++ )); do
      elem=${elemList[$i]}
      elemLine=$(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep "</$elem>")
      echo $elemLine | grep -e "^</[^ ]*>$" 1>/dev/null 2>&1
      if [ "0" = "$?" ]; then
        continue
      fi
      elemVal=$(echo $elemLine | tr '\011' '\040'| sed -e 's/^[ ]*//' -e 's/^<.*>\([^<].*\)<.*>$/\1/' | sed -e 's/^[ ]*//' | sed -e 's/[ ]*$//')
      xmlElem="${suffix}$(echo $elem | sed 's/-/_/g')"
      eval ${xmlElem}=`echo -ne \""${elemVal}"\"`
      attrList=($(cat $xmlFile | tr '\n' ' ' | XMLLINT_INDENT="" xmllint --format - | /bin/grep "</$elem>" | tr '\011' '\040' | sed -e 's/^[ ]*//' | cut -d '>' -f 1  | sed -e 's/^<[^ ]*//' | tr "'" '"' | tr '"' '\n'  | tr '=' '\n' | sed -e 's/^[ ]*//' | sed '/^$/d' | tr '\011' '\040' | tr ' ' '>'))
      for (( j = 0 ; j < ${#attrList[@]} ; j++ )); do
        attr=${attrList[$j]}
        ((j++))
        attrVal=$(echo ${attrList[$j]} | tr '>' ' ')
        attrName=`echo -ne ${xmlElem}_${attr}`
        eval ${attrName}=`echo -ne \""${attrVal}"\"`
      done
    done
  fi
}

FolderPassword.create() {
  title=$(coreval FolderPassword name)
  subdir=$(coreval FolderPassword id)
  username=$(coreval FolderPassword username)
  password=$(coreval FolderPassword password)
  password2=$(coreval FolderPassword password2)
  id=$(coreval Domain:Vhost id)
  session=$(coreval OpenCORE:Session sessionid)

  #----------------------------------------------
  # Trim leading and trailing slashes from subdir
  if [ "$subdir" != "" ]; then
    subdir=${subdir:1}
    subdir=$(echo -n ${subdir%/})
  fi

  #--------------------------------
  # Check that entered passwords match
  if [ $password != $password2 ]; then
    exiterror "The passwords entered do not match. Please check and try again."
  fi

  #--------------------------------
  # Copy coreclient to staging area (!!!!MUST BE REMOVED it will be installed for OP1.1!!!!)
  cd /var/openpanel/conf/staging/FolderPassword
  cp /var/openpanel/modules/FolderPassword.module/coreclient ./
  PATH=$PATH:/var/openpanel/conf/staging/FolderPassword

  #------------------------
  # Ensure session is valid
  if [ "$session" = "" ]; then
    exiterror "Unexpected error! Session ID not obtained from RPC. Unable to proceed."
  fi

  #-------------------
  # Obtain parent user (!!!!MUST BE CHANGED TO owner-metaid from OP1.1!!!!)
  coreclient -h localhost -s $session -c getrecords classid User parentid $session &> /var/openpanel/conf/staging/FolderPassword/session.log
  FolderPassword.parseXML "/var/openpanel/conf/staging/FolderPassword/session.log"
  user=$dict_string
  if [ ! -d /home/$user ]; then
    exiterror "Unexpected error! Unable to obtain valid username."
  fi
  
  #---------------------------------------------
  # Ensure subdomain already exists (as a vhost)
  vhost=$id
  vhostdir="/home/$user/sites/$id"
  if [ ! -d "$vhostdir/public_html" ]; then
    exiterror "Unexpected error! Invalid vhost. Unable to locate public_html folder."
  fi
  
  #---------------------------------------------
  # Ensure subdirectory already exists
  if [ ! -d "$vhostdir/public_html/$subdir" ]; then
    exiterror "Specified subdirectory does not exist. Security can only be applied to existing directories."
  fi

  #--------------------
  # Prepare temp folder
  cd /var/openpanel/conf/staging/FolderPassword >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  mkdir tmp &> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  cd tmp >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  mkdir passwd &> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  cd passwd >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  rm -f *
#  rm -f .htaccess
#  rm -f .htpasswd

  #----------------------------------------------------------------
  # Grab existing password file (if it exists), or create a new one
  if [ -f "$vhostdir/public_html/$subdir/.htpasswd" ]; then
    echo "Copying existing .htpasswd file" >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
    cp $vhostdir/public_html/$subdir/.htpasswd .
    cat .htpasswd >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
    htpasswd -b ./.htpasswd $username $password >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  else
    htpasswd -bc ./.htpasswd $username $password >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  fi

  #--------------------------------------------
  # Grab existing .htaccess file (if it exists)
  if [ -f "$vhostdir/public_html/$subdir/.htaccess" ]; then
    echo "Copying existing .htaccess file" >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
    cp $vhostdir/public_html/$subdir/.htaccess . >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
    cat .htaccess >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  fi

  #--------------------------
  # Remove any existing lines
  sed -i "/### FolderPassword.module START ###/d" .htaccess >> /var/openpanel/conf/staging/FolderPassword/sed.log
  sed -i "/AuthName/d" .htaccess >> /var/openpanel/conf/staging/FolderPassword/sed.log
  sed -i "/AuthType/d" .htaccess >> /var/openpanel/conf/staging/FolderPassword/sed.log
  sed -i "/AuthUserFile/d" .htaccess >> /var/openpanel/conf/staging/FolderPassword/sed.log
  sed -i "/require valid-user/d" .htaccess >> /var/openpanel/conf/staging/FolderPassword/sed.log
  sed -i "/### FolderPassword.module END ###/d" .htaccess >> /var/openpanel/conf/staging/FolderPassword/sed.log

  #---------------------------
  # Append new htaccess values
  echo "### FolderPassword.module START ###" >> /var/openpanel/conf/staging/FolderPassword/tmp/passwd/.htaccess
  echo "AuthName \"$title\"" >> /var/openpanel/conf/staging/FolderPassword/tmp/passwd/.htaccess
  echo "AuthType Basic" >> /var/openpanel/conf/staging/FolderPassword/tmp/passwd/.htaccess
  echo "AuthUserFile $vhostdir/public_html/$subdir/.htpasswd" >> /var/openpanel/conf/staging/FolderPassword/tmp/passwd/.htaccess
  echo "require valid-user" >> /var/openpanel/conf/staging/FolderPassword/tmp/passwd/.htaccess
  echo "### FolderPassword.module END ###" >> /var/openpanel/conf/staging/FolderPassword/tmp/passwd/.htaccess

  # Place files in selected subdir
  authd runscript install-folder-contents "$session" "/var/openpanel/conf/staging/FolderPassword/tmp/passwd/" "$vhostdir/public_html/$subdir" 0 0 0 -f
  authd runscript change-permission "$session" "$vhostdir/public_html/$subdir/.htaccess" "www-data" "www-data" "644"
  authd runscript change-permission "$session" "$vhostdir/public_html/$subdir/.htpasswd" "www-data" "www-data" "644"

  #------------------------------------
  # Clean up (simply remove tmp folder)
  cd /var/openpanel/conf/staging/FolderPassword >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
  rm -R tmp >> /var/openpanel/conf/staging/FolderPassword/folderpassword.log
}

FolderPassword.updateApp() {
  // Simply call create. This handles updating existing htaccess/htpasswd files
  FolderPassword.create
}

FolderPassword.deleteApp() {
  id=$(coreval Domain:Vhost id)
}

implement FolderPassword.module
